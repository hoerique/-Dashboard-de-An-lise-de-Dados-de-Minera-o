"""
Script para an√°lise detalhada dos dados de minera√ß√£o
Este script realiza an√°lises estat√≠sticas avan√ßadas e gera relat√≥rios
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

def carregar_e_tratar_dados():
    """Carrega e trata os dados do CSV"""
    print("üîÑ Carregando dados...")
    
    # Carregar dados
    df = pd.read_csv('minera√ß√£o.csv')
    print(f"‚úÖ Dados carregados: {len(df)} registros")
    
    # Converter colunas de data
    df['Data de Produ√ß√£o'] = pd.to_datetime(df['Data de Produ√ß√£o'])
    
    # Extrair informa√ß√µes da data
    df['Ano'] = df['Data de Produ√ß√£o'].dt.year
    df['M√™s'] = df['Data de Produ√ß√£o'].dt.month
    df['Trimestre'] = df['Data de Produ√ß√£o'].dt.quarter
    df['Dia da Semana'] = df['Data de Produ√ß√£o'].dt.day_name()
    
    # Converter colunas num√©ricas
    colunas_numericas = [
        'Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)', 
        'Volume de Vendas (R$)', 'Custo de Produ√ß√£o (R$)', 
        'Lucro (R$)', 'Quantidade Exportada (Toneladas)', 
        'Custo Log√≠stico (R$)'
    ]
    
    for coluna in colunas_numericas:
        df[coluna] = pd.to_numeric(df[coluna], errors='coerce')
    
    # Calcular m√©tricas adicionais
    df['Margem de Lucro (%)'] = (df['Lucro (R$)'] / df['Volume de Vendas (R$)']) * 100
    df['Custo Total'] = df['Custo de Produ√ß√£o (R$)'] + df['Custo Log√≠stico (R$)']
    df['ROI (%)'] = (df['Lucro (R$)'] / df['Custo Total']) * 100
    df['Pre√ßo por Tonelada'] = df['Volume de Vendas (R$)'] / df['Quantidade (Toneladas)']
    
    # Limpar dados inconsistentes
    df_original = df.copy()
    df = df.dropna()
    print(f"üßπ Dados ap√≥s remo√ß√£o de nulos: {len(df)} registros")
    
    # Remover outliers extremos
    registros_antes = len(df)
    for coluna in colunas_numericas:
        Q1 = df[coluna].quantile(0.25)
        Q3 = df[coluna].quantile(0.75)
        IQR = Q3 - Q1
        limite_inferior = Q1 - 1.5 * IQR
        limite_superior = Q3 + 1.5 * IQR
        df = df[(df[coluna] >= limite_inferior) & (df[coluna] <= limite_superior)]
    
    print(f"üìä Dados ap√≥s remo√ß√£o de outliers: {len(df)} registros")
    print(f"üóëÔ∏è Registros removidos: {registros_antes - len(df)}")
    
    return df, df_original

def analise_estatistica(df):
    """Realiza an√°lise estat√≠stica detalhada"""
    print("\nüìà AN√ÅLISE ESTAT√çSTICA DETALHADA")
    print("=" * 50)
    
    # Estat√≠sticas descritivas
    colunas_analise = [
        'Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)', 
        'Volume de Vendas (R$)', 'Custo de Produ√ß√£o (R$)', 
        'Lucro (R$)', 'Margem de Lucro (%)', 'ROI (%)'
    ]
    
    print("\nüìã Estat√≠sticas Descritivas:")
    print(df[colunas_analise].describe())
    
    # An√°lise por produto
    print("\nüè≠ An√°lise por Produto:")
    analise_produto = df.groupby('Produto').agg({
        'Volume de Vendas (R$)': ['count', 'sum', 'mean'],
        'Lucro (R$)': ['sum', 'mean'],
        'Margem de Lucro (%)': 'mean',
        'ROI (%)': 'mean'
    }).round(2)
    print(analise_produto)
    
    # An√°lise por regi√£o
    print("\nüó∫Ô∏è An√°lise por Regi√£o:")
    analise_regiao = df.groupby('Regi√£o').agg({
        'Volume de Vendas (R$)': ['count', 'sum', 'mean'],
        'Lucro (R$)': ['sum', 'mean'],
        'Margem de Lucro (%)': 'mean'
    }).round(2)
    print(analise_regiao)
    
    # An√°lise por sustentabilidade
    print("\nüå± An√°lise por Classifica√ß√£o de Sustentabilidade:")
    analise_sust = df.groupby('Classifica√ß√£o de Sustentabilidade').agg({
        'Volume de Vendas (R$)': ['count', 'sum', 'mean'],
        'Lucro (R$)': ['sum', 'mean'],
        'Margem de Lucro (%)': 'mean'
    }).round(2)
    print(analise_sust)

def analise_temporal(df):
    """An√°lise temporal dos dados"""
    print("\nüìÖ AN√ÅLISE TEMPORAL")
    print("=" * 50)
    
    # An√°lise por ano
    print("\nüìä An√°lise por Ano:")
    analise_ano = df.groupby('Ano').agg({
        'Volume de Vendas (R$)': 'sum',
        'Lucro (R$)': 'sum',
        'Margem de Lucro (%)': 'mean',
        'Quantidade (Toneladas)': 'sum'
    }).round(2)
    print(analise_ano)
    
    # An√°lise por m√™s
    print("\nüìÖ An√°lise por M√™s:")
    analise_mes = df.groupby('M√™s').agg({
        'Volume de Vendas (R$)': 'sum',
        'Lucro (R$)': 'sum',
        'Margem de Lucro (%)': 'mean'
    }).round(2)
    print(analise_mes)
    
    # An√°lise por trimestre
    print("\nüìä An√°lise por Trimestre:")
    analise_trimestre = df.groupby('Trimestre').agg({
        'Volume de Vendas (R$)': 'sum',
        'Lucro (R$)': 'sum',
        'Margem de Lucro (%)': 'mean'
    }).round(2)
    print(analise_trimestre)

def analise_correlacao(df):
    """An√°lise de correla√ß√£o entre vari√°veis"""
    print("\nüîó AN√ÅLISE DE CORRELA√á√ÉO")
    print("=" * 50)
    
    colunas_correlacao = [
        'Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)', 
        'Volume de Vendas (R$)', 'Custo de Produ√ß√£o (R$)', 
        'Lucro (R$)', 'Custo Log√≠stico (R$)', 'Margem de Lucro (%)'
    ]
    
    correlacao = df[colunas_correlacao].corr()
    print("\nMatriz de Correla√ß√£o:")
    print(correlacao.round(3))
    
    # Correla√ß√µes mais fortes
    print("\nüîç Correla√ß√µes mais fortes (|r| > 0.5):")
    for i in range(len(correlacao.columns)):
        for j in range(i+1, len(correlacao.columns)):
            valor = correlacao.iloc[i, j]
            if abs(valor) > 0.5:
                print(f"{correlacao.columns[i]} ‚Üî {correlacao.columns[j]}: {valor:.3f}")

def identificar_padroes(df):
    """Identifica padr√µes interessantes nos dados"""
    print("\nüîç IDENTIFICA√á√ÉO DE PADR√ïES")
    print("=" * 50)
    
    # Top 5 produtos mais lucrativos
    print("\nüèÜ Top 5 Produtos por Lucro Total:")
    top_lucro = df.groupby('Produto')['Lucro (R$)'].sum().sort_values(ascending=False).head()
    print(top_lucro)
    
    # Top 5 f√°bricas mais produtivas
    print("\nüè≠ Top 5 F√°bricas por Volume de Vendas:")
    top_fabricas = df.groupby('F√°brica')['Volume de Vendas (R$)'].sum().sort_values(ascending=False).head()
    print(top_fabricas)
    
    # An√°lise de sazonalidade
    print("\nüìÖ An√°lise de Sazonalidade (por m√™s):")
    sazonalidade = df.groupby('M√™s')['Volume de Vendas (R$)'].mean().sort_index()
    print(sazonalidade)
    
    # Produtos com maior margem de lucro
    print("\nüí∞ Produtos com Maior Margem de Lucro:")
    margem_produtos = df.groupby('Produto')['Margem de Lucro (%)'].mean().sort_values(ascending=False)
    print(margem_produtos)

def gerar_relatorio(df):
    """Gera um relat√≥rio resumido"""
    print("\nüìÑ RELAT√ìRIO RESUMIDO")
    print("=" * 50)
    
    # M√©tricas gerais
    total_vendas = df['Volume de Vendas (R$)'].sum()
    total_lucro = df['Lucro (R$)'].sum()
    margem_geral = (total_lucro / total_vendas) * 100
    total_toneladas = df['Quantidade (Toneladas)'].sum()
    
    print(f"\nüìä M√âTRICAS GERAIS:")
    print(f"‚Ä¢ Total de Vendas: R$ {total_vendas:,.2f}")
    print(f"‚Ä¢ Total de Lucro: R$ {total_lucro:,.2f}")
    print(f"‚Ä¢ Margem de Lucro Geral: {margem_geral:.2f}%")
    print(f"‚Ä¢ Total de Toneladas: {total_toneladas:,.0f}")
    print(f"‚Ä¢ N√∫mero de Registros: {len(df):,}")
    
    # Produto mais vendido
    produto_mais_vendido = df.groupby('Produto')['Volume de Vendas (R$)'].sum().idxmax()
    vendas_produto = df.groupby('Produto')['Volume de Vendas (R$)'].sum().max()
    print(f"\nüèÜ PRODUTO MAIS VENDIDO:")
    print(f"‚Ä¢ {produto_mais_vendido}: R$ {vendas_produto:,.2f}")
    
    # Regi√£o mais lucrativa
    regiao_mais_lucrativa = df.groupby('Regi√£o')['Lucro (R$)'].sum().idxmax()
    lucro_regiao = df.groupby('Regi√£o')['Lucro (R$)'].sum().max()
    print(f"\nüó∫Ô∏è REGI√ÉO MAIS LUCRATIVA:")
    print(f"‚Ä¢ {regiao_mais_lucrativa}: R$ {lucro_regiao:,.2f}")
    
    # Per√≠odo de maior atividade
    periodo_mais_ativo = df.groupby('Ano')['Volume de Vendas (R$)'].sum().idxmax()
    vendas_periodo = df.groupby('Ano')['Volume de Vendas (R$)'].sum().max()
    print(f"\nüìÖ PER√çODO DE MAIOR ATIVIDADE:")
    print(f"‚Ä¢ {periodo_mais_ativo}: R$ {vendas_periodo:,.2f}")

def salvar_dados_tratados(df):
    """Salva os dados tratados em diferentes formatos"""
    print("\nüíæ SALVANDO DADOS TRATADOS")
    print("=" * 50)
    
    # Salvar CSV tratado
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    nome_arquivo = f"dados_mineracao_tratados_{timestamp}.csv"
    df.to_csv(nome_arquivo, index=False, encoding='utf-8-sig')
    print(f"‚úÖ CSV salvo: {nome_arquivo}")
    
    # Salvar Excel com m√∫ltiplas abas
    nome_excel = f"relatorio_mineracao_{timestamp}.xlsx"
    with pd.ExcelWriter(nome_excel, engine='openpyxl') as writer:
        # Dados completos
        df.to_excel(writer, sheet_name='Dados_Completos', index=False)
        
        # Resumo por produto
        resumo_produto = df.groupby('Produto').agg({
            'Volume de Vendas (R$)': ['count', 'sum', 'mean'],
            'Lucro (R$)': ['sum', 'mean'],
            'Margem de Lucro (%)': 'mean'
        }).round(2)
        resumo_produto.to_excel(writer, sheet_name='Resumo_Produto')
        
        # Resumo por regi√£o
        resumo_regiao = df.groupby('Regi√£o').agg({
            'Volume de Vendas (R$)': ['count', 'sum', 'mean'],
            'Lucro (R$)': ['sum', 'mean'],
            'Margem de Lucro (%)': 'mean'
        }).round(2)
        resumo_regiao.to_excel(writer, sheet_name='Resumo_Regiao')
        
        # Resumo temporal
        resumo_temporal = df.groupby('Ano').agg({
            'Volume de Vendas (R$)': 'sum',
            'Lucro (R$)': 'sum',
            'Margem de Lucro (%)': 'mean'
        }).round(2)
        resumo_temporal.to_excel(writer, sheet_name='Resumo_Temporal')
    
    print(f"‚úÖ Excel salvo: {nome_excel}")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO AN√ÅLISE DE DADOS DE MINERA√á√ÉO")
    print("=" * 60)
    
    # Carregar dados
    df, df_original = carregar_e_tratar_dados()
    
    if df is not None and len(df) > 0:
        # Realizar an√°lises
        analise_estatistica(df)
        analise_temporal(df)
        analise_correlacao(df)
        identificar_padroes(df)
        gerar_relatorio(df)
        salvar_dados_tratados(df)
        
        print("\nüéâ AN√ÅLISE CONCLU√çDA COM SUCESSO!")
        print("=" * 60)
        print("üìÅ Arquivos gerados:")
        print("   ‚Ä¢ dados_mineracao_tratados_[timestamp].csv")
        print("   ‚Ä¢ relatorio_mineracao_[timestamp].xlsx")
        print("\nüìä Para visualiza√ß√£o interativa, execute: streamlit run app.py")
        
    else:
        print("‚ùå Erro: N√£o foi poss√≠vel carregar ou processar os dados")

if __name__ == "__main__":
    main() 