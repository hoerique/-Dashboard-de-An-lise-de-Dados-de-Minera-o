"""
Script de teste para verificar se o dashboard est√° funcionando corretamente
"""

import pandas as pd
import numpy as np
from datetime import datetime

def testar_carregamento_dados():
    """Testa o carregamento e tratamento dos dados"""
    print("üß™ TESTANDO CARREGAMENTO DE DADOS")
    print("=" * 50)
    
    try:
        # Carregar dados
        df = pd.read_csv('minera√ß√£o.csv')
        print(f"‚úÖ Dados carregados: {len(df)} registros")
        
        # Verificar colunas
        colunas_esperadas = [
            'ID', 'Produto', 'Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)',
            'F√°brica', 'Data de Produ√ß√£o', 'Embalagem', 'Classifica√ß√£o de Sustentabilidade',
            'Volume de Vendas (R$)', 'Custo de Produ√ß√£o (R$)', 'Lucro (R$)',
            'Regi√£o', 'Quantidade Exportada (Toneladas)', 'Custo Log√≠stico (R$)'
        ]
        
        colunas_faltando = [col for col in colunas_esperadas if col not in df.columns]
        if colunas_faltando:
            print(f"‚ùå Colunas faltando: {colunas_faltando}")
            return False
        else:
            print("‚úÖ Todas as colunas necess√°rias est√£o presentes")
        
        # Testar convers√£o de data
        df['Data de Produ√ß√£o'] = pd.to_datetime(df['Data de Produ√ß√£o'])
        print("‚úÖ Convers√£o de data realizada com sucesso")
        
        # Testar convers√£o num√©rica
        colunas_numericas = [
            'Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)', 
            'Volume de Vendas (R$)', 'Custo de Produ√ß√£o (R$)', 
            'Lucro (R$)', 'Quantidade Exportada (Toneladas)', 
            'Custo Log√≠stico (R$)'
        ]
        
        for coluna in colunas_numericas:
            df[coluna] = pd.to_numeric(df[coluna], errors='coerce')
        
        print("‚úÖ Convers√£o num√©rica realizada com sucesso")
        
        # Testar c√°lculos de KPIs
        df['Margem de Lucro (%)'] = (df['Lucro (R$)'] / df['Volume de Vendas (R$)']) * 100
        df['Custo Total'] = df['Custo de Produ√ß√£o (R$)'] + df['Custo Log√≠stico (R$)']
        df['ROI (%)'] = (df['Lucro (R$)'] / df['Custo Total']) * 100
        
        print("‚úÖ C√°lculos de KPIs realizados com sucesso")
        
        # Verificar se h√° dados v√°lidos
        df_limpo = df.dropna()
        print(f"‚úÖ Dados ap√≥s limpeza: {len(df_limpo)} registros")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no carregamento: {e}")
        return False

def testar_kpis(df):
    """Testa os c√°lculos dos KPIs"""
    print("\nüß™ TESTANDO C√ÅLCULOS DE KPIs")
    print("=" * 50)
    
    try:
        # KPI 1: Lucro Total
        lucro_total = df['Lucro (R$)'].sum()
        print(f"‚úÖ KPI 1 - Lucro Total: R$ {lucro_total:,.2f}")
        
        # KPI 2: Volume Total de Vendas
        vendas_totais = df['Volume de Vendas (R$)'].sum()
        print(f"‚úÖ KPI 2 - Volume Total de Vendas: R$ {vendas_totais:,.2f}")
        
        # KPI 3: Margem de Lucro
        margem_media = df['Margem de Lucro (%)'].mean()
        print(f"‚úÖ KPI 3 - Margem de Lucro M√©dia: {margem_media:.2f}%")
        
        # KPI 4: Custo M√©dio Log√≠stico por Tonelada
        custo_logistico_total = df['Custo Log√≠stico (R$)'].sum()
        quantidade_total = df['Quantidade (Toneladas)'].sum()
        custo_medio_logistico = custo_logistico_total / quantidade_total
        print(f"‚úÖ KPI 4 - Custo M√©dio Log√≠stico por Tonelada: R$ {custo_medio_logistico:.2f}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos c√°lculos de KPIs: {e}")
        return False

def testar_graficos(df):
    """Testa a gera√ß√£o dos gr√°ficos"""
    print("\nüß™ TESTANDO GERA√á√ÉO DE GR√ÅFICOS")
    print("=" * 50)
    
    try:
        # Teste 1: Gr√°fico de Barras ‚Äì Lucro por Produto
        lucro_por_produto = df.groupby('Produto')['Lucro (R$)'].sum().reset_index()
        print(f"‚úÖ Gr√°fico 1 - Lucro por Produto: {len(lucro_por_produto)} produtos")
        
        # Teste 2: Gr√°fico de Linhas ‚Äì Evolu√ß√£o de Vendas
        vendas_tempo = df.groupby('Data de Produ√ß√£o')['Volume de Vendas (R$)'].sum().reset_index()
        print(f"‚úÖ Gr√°fico 2 - Evolu√ß√£o de Vendas: {len(vendas_tempo)} pontos temporais")
        
        # Teste 3: Gr√°fico de Pizza ‚Äì Vendas por Regi√£o
        vendas_por_regiao = df.groupby('Regi√£o')['Volume de Vendas (R$)'].sum().reset_index()
        print(f"‚úÖ Gr√°fico 3 - Vendas por Regi√£o: {len(vendas_por_regiao)} regi√µes")
        
        # Teste 4: Gr√°fico de Colunas ‚Äì Custo vs Lucro por F√°brica
        custo_lucro_fabrica = df.groupby('F√°brica').agg({
            'Custo de Produ√ß√£o (R$)': 'sum',
            'Lucro (R$)': 'sum'
        }).reset_index()
        print(f"‚úÖ Gr√°fico 4 - Custo vs Lucro por F√°brica: {len(custo_lucro_fabrica)} f√°bricas")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de gr√°ficos: {e}")
        return False

def testar_filtros(df):
    """Testa os filtros do dashboard"""
    print("\nüß™ TESTANDO FILTROS")
    print("=" * 50)
    
    try:
        # Teste filtro por produto
        produtos = df['Produto'].unique()
        print(f"‚úÖ Filtro Produto: {len(produtos)} produtos dispon√≠veis")
        
        # Teste filtro por regi√£o
        regioes = df['Regi√£o'].unique()
        print(f"‚úÖ Filtro Regi√£o: {len(regioes)} regi√µes dispon√≠veis")
        
        # Teste filtro por ano
        df['Ano'] = df['Data de Produ√ß√£o'].dt.year
        anos = df['Ano'].unique()
        print(f"‚úÖ Filtro Ano: {len(anos)} anos dispon√≠veis")
        
        # Teste filtro por sustentabilidade
        classificacoes = df['Classifica√ß√£o de Sustentabilidade'].unique()
        print(f"‚úÖ Filtro Sustentabilidade: {len(classificacoes)} classifica√ß√µes dispon√≠veis")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro nos filtros: {e}")
        return False

def main():
    """Fun√ß√£o principal de teste"""
    print("üöÄ INICIANDO TESTES DO DASHBOARD")
    print("=" * 60)
    
    # Teste 1: Carregamento de dados
    if not testar_carregamento_dados():
        print("‚ùå Falha no teste de carregamento de dados")
        return
    
    # Carregar dados para os pr√≥ximos testes
    df = pd.read_csv('minera√ß√£o.csv')
    df['Data de Produ√ß√£o'] = pd.to_datetime(df['Data de Produ√ß√£o'])
    
    colunas_numericas = [
        'Quantidade (Toneladas)', 'Pre√ßo Unit√°rio (R$)', 
        'Volume de Vendas (R$)', 'Custo de Produ√ß√£o (R$)', 
        'Lucro (R$)', 'Quantidade Exportada (Toneladas)', 
        'Custo Log√≠stico (R$)'
    ]
    
    for coluna in colunas_numericas:
        df[coluna] = pd.to_numeric(df[coluna], errors='coerce')
    
    df['Margem de Lucro (%)'] = (df['Lucro (R$)'] / df['Volume de Vendas (R$)']) * 100
    df['Custo Total'] = df['Custo de Produ√ß√£o (R$)'] + df['Custo Log√≠stico (R$)']
    df['ROI (%)'] = (df['Lucro (R$)'] / df['Custo Total']) * 100
    df = df.dropna()
    
    # Teste 2: KPIs
    if not testar_kpis(df):
        print("‚ùå Falha no teste de KPIs")
        return
    
    # Teste 3: Gr√°ficos
    if not testar_graficos(df):
        print("‚ùå Falha no teste de gr√°ficos")
        return
    
    # Teste 4: Filtros
    if not testar_filtros(df):
        print("‚ùå Falha no teste de filtros")
        return
    
    print("\nüéâ TODOS OS TESTES PASSARAM COM SUCESSO!")
    print("=" * 60)
    print("‚úÖ O dashboard est√° pronto para uso!")
    print("üìä Execute 'streamlit run app.py' para iniciar o dashboard")

if __name__ == "__main__":
    main() 